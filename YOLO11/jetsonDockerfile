# Use Ubuntu 22.04 as the base image
FROM ubuntu:22.04

# Set environment variables to address MKL threading issues and other settings
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_BREAK_SYSTEM_PACKAGES=1 \
    MKL_THREADING_LAYER=GNU

# Set up working directory
WORKDIR /ultralytics

# Copy application files
COPY ./ultralytics/ .

# Copy required resources
ADD http://192.168.143.41:9081/repository/storage/Arial.ttf \
    http://192.168.143.41:9081/repository/storage/Arial.Unicode.ttf \
    /root/.config/Ultralytics/

ADD http://192.168.143.41:9081/repository/storage/yolo11n.pt .

# Add NVIDIA CUDA repo key and update packages
RUN total_lines=$(wc -l < /etc/apt/sources.list) && lines_to_keep=$((total_lines - 6)) && head -n $lines_to_keep /etc/apt/sources.list > /etc/apt/sources.list.new
RUN sed -i 's|http://archive.ubuntu.com/ubuntu/|http://192.168.143.41:9081/repository/ubuntu/|g' /etc/apt/sources.list.new
RUN mv /etc/apt/sources.list.new /etc/apt/sources.list

RUN apt-get update && \
    apt-get install -y curl wget && \
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/arm64/cuda-keyring_1.1-1_all.deb && \
    dpkg -i cuda-keyring_1.1-1_all.deb && \
    apt-get update

# Install system dependencies
RUN apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    gcc \
    g++ \
    git \
    gnupg \
    libglib2.0-0 \
    libgl1 \
    libopenblas-dev \
    libpython3-dev \
    libsm6 \
    libusb-1.0-0 \
    python3.10 \
    python3-dev \
    python3-pip \
    python3-libnvinfer \
    unzip \
    zip \
    openssl \
    tar \
    cuda \
    cudnn \
    libcusparselt0 \
    libcusparselt-dev && \
    rm -rf /var/lib/apt/lists/*

# Create Python symlinks
RUN ln -sf /usr/bin/python3.10 /usr/bin/python3 && \
    ln -sf /usr/bin/python3 /usr/bin/python
RUN mkdir -p /root/.pip/ && \
    if [ -f /root/.pip/pip.conf ]; then mv /root/.pip/pip.conf /root/.pip/pip.conf.bak; fi  
COPY ./resource/pip.conf /root/.pip/pip.conf 

# Copy PyTorch and TorchVision wheels and install them
ADD http://192.168.143.41:9081/repository/python/packages/torch/2.5.0/torch-2.5.0-cp310-cp310-linux_aarch64.whl .
ADD http://192.168.143.41:9081/repository/python/packages/torchvision/0.20.0/torchvision-0.20.0-cp310-cp310-linux_aarch64.whl .
RUN pip install /ultralytics/torch-2.5.0-cp310-cp310-linux_aarch64.whl && \
    pip install /ultralytics/torchvision-0.20.0-cp310-cp310-linux_aarch64.whl

# Upgrade pip and install Python dependencies
RUN python3 -m pip install --upgrade pip wheel && \
    pip install --no-cache-dir -v -e . "albumentations>=1.4.6" comet pycocotools numpy==1.26.1

# Cleanup unnecessary files to reduce image size
RUN rm -rf tmp /root/.config/Ultralytics/persistent_cache.json && \
    chmod -R 777 /ultralytics

COPY bus.jpg .
# Set default command to run YOLO prediction
CMD ["yolo", "predict", "model=yolo11n.pt", "source=https://ultralytics.com/images/bus.jpg"]
